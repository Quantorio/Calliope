
/**
 * Nutze diese Datei für benutzerdefinierte Funktionen und Blöcke.
 * Weitere Informationen unter https://makecode.calliope.cc/blocks/custom
 */

enum MyEnum {
    //% block="one"
    One,
    //% block="two"
    Two
}

/**
 * Benutzerdefinierte Blöcke
 */
//% weight=100 color=#0fbc11 icon=""
namespace Erklaerung {
    //basic.showString("Made with AI and Fun!")
    /**
     * TODO: Beschreibe deine Funktion hier
     * @param s Beschreibe die Parameter hier, eg: "Hello"
     * @param e Beschreibe die Parameter hier
     */
    //% block
    export function writeInt(text:number,interval:number):void{
        writeString(text.toString(),interval);
    }


    /**
     * TODO: Beschreibe deine Funktion hier
     * @param s Beschreibe die Parameter hier, eg: "Hello"
     * @param e Beschreibe die Parameter hier
     */
    //% block
    export function writeString(text: string, interval:number=100): void {
        if(interval<=0)interval=100;
        let e: string[] = []
        for (let Index = 0; Index <= 25; Index++) {
            let list: string[] = []
            e.push(String.fromCharCode(Index + 97))
            //basic.showString(String.fromCharCode(Index + 97))
        }
        e.push("ö")
        for(let Index=0;Index<=42;Index++){
            e.push(String.fromCharCode(Index+48))
        }


        let pos: number[][][] = init()
        pos.push([[4,4],[3,4], [2,4], [1,4],[0,3],[0,2],[1,1],[2,1],[3,1],[3,2],[3,3]])//a
        pos.push([[2,4],[1,4],[0,4],[0,3],[0,2],[0,1],[0,0],[1,2],[2,2],[3,3]])//b
        pos.push([[3,4],[2,4],[1,4],[0,3],[0,2],[1,1],[2,1],[3,1]])//c
        pos.push([[3,4],[2,4],[1,4],[0,3],[1,2],[2,2],[3,2],[3,3],[3,1],[3,0]])//d
        pos.push([[1,0],[2,0],[0,1],[3,1],[0,2],[1,2],[2,2],[0,3],[1,4],[2,4],[3,4]])//e
        pos.push([[2,0],[3,0],[1,1],[0,2],[1,2],[2,2],[1,3],[1,4]])//f
        pos.push([[1,0],[2,0],[3,0],[0,1],[3,1],[1,2],[2,2],[3,2],[3,3],[1,4],[2,4]])//g
        pos.push([[0,0],[0,1],[0,2],[1,2],[2,2],[0,3],[3,3],[0,4],[3,4]])//h
        pos.push([[1,0],[1,2],[1,3],[1,4]])//i
        pos.push([[3,0],[3,2],[3,3],[1,4],[2,4]])//j
        pos.push([[0,0],[0,1],[2,1],[0,2],[1,2],[0,3],[2,3],[0,4],[3,4]])//k
        pos.push([[1,0],[1,1],[1,2],[1,3],[2,4],[3,4]])//l
        pos.push([[0,1],[1,1],[3,1],[4,1],[0,2],[2,2],[4,2],[0,3],[4,3],[0,4],[4,4]])//m
        pos.push([[0,1],[1,1],[2,1],[0,2],[3,2],[0,3],[3,3],[0,4],[3,4]])//n
        pos.push([[1,1],[2,1],[0,2],[3,2],[0,3],[3,3],[1,4],[2,4]])//o
        pos.push([[0,1],[1,1],[2,1],[0,2],[3,2],[0,3],[1,3],[2,3],[0,4]])//p
        pos.push([[1,1],[2,1],[3,1],[0,2],[3,2],[1,3],[2,3],[3,3],[3,4]])//q
        pos.push([[1,1],[2,1],[3,1],[0,2],[0,3],[0,4]])//r
        pos.push([[2,1],[3,1],[1,2],[2,3],[0,4],[1,4]])//s
        pos.push([[1,0],[1,1],[1,2],[2,2],[3,2],[1,3],[2,4],[3,4],[4,4]])//t
        pos.push([[0,1],[3,1],[0,2],[3,2],[0,3],[3,3],[1,4],[2,4],[3,4],[4,4]])//u
        pos.push([[0,1],[4,1],[0,2],[4,2],[1,3],[3,3],[2,4]])//v
        pos.push([[0,1],[4,1],[0,2],[4,2],[0,3],[2,3],[4,3],[0,4],[1,4],[3,4],[4,4]])//w
        pos.push([[0,1],[3,1],[1,2],[2,2],[1,3],[2,3],[0,4],[3,4]])//x
        pos.push([[0,1],[4,1],[1,2],[3,2],[2,3],[0,4],[1,4]])//y
        pos.push([[0,1],[1,1],[2,1],[3,1],[2,2],[1,3],[0,4],[1,4],[2,4],[3,4]])//z
        pos.push([[0,0],[3,0],[1,1],[2,1],[0,2],[3,2],[0,3],[3,3],[1,4],[2,4]])//ö
        //Zahlen
        pos.push([[1,0],[2,0],[0,1],[3,1],[0,2],[3,2],[0,3],[3,3],[1,4],[2,4]])//0
        pos.push([[2,0],[1,1],[2,1],[2,2],[2,3],[1,4],[2,4],[3,4]])//1
        pos.push([[1,0],[2,0],[3,1],[2,2],[1,3],[1,4],[2,4],[3,4]])//2
        pos.push([[0,0],[1,0],[2,0],[3,0],[3,1],[2,2],[0,3],[3,3],[1,4],[2,4]])//3
        pos.push([[2,0],[3,0],[1,1],[3,1],[0,2],[3,2],[0,3],[1,3],[2,3],[3,3],[4,3],[3,4]])//4
        pos.push([[0,0],[1,0],[2,0],[3,0],[4,0],[0,1],[0,2],[1,2],[2,2],[3,2],[4,3],[0,4],[1,4],[2,4],[3,4]])//5
        pos.push([[3,0],[2,1],[1,2],[2,2],[3,2],[0,3],[4,3],[1,4],[2,4],[3,4]])//6
        pos.push([[0,0],[1,0],[2,0],[3,0],[4,0],[3,1],[2,2],[1,3],[0,4]])//7
        pos.push([[1,0],[2,0],[3,0],[0,1],[4,1],[1,2],[2,2],[3,2],[0,3],[4,3],[1,4],[2,4],[3,4]])//8
        pos.push([[1,0],[2,0],[3,0],[0,1],[4,1],[1,2],[2,2],[3,2],[2,3],[1,4]])//9
        pos.push([[1,1],[1,3]])//:
        pos.push([[1,1],[1,3],[1,4]])//;
        pos.push([[3,0],[2,1],[1,2],[2,3],[3,4]])//<
        pos.push([[1,1],[2,1],[3,1],[1,3],[2,3],[3,3]])//=
        pos.push([[1,0],[2,1],[3,2],[2,3],[1,4]])//>
        pos.push([[1,0],[2,0],[3,0],[0,1],[4,1],[2,2],[3,2],[2,4]])//?
        pos.push([[1,0],[2,0],[3,0],[0,1],[4,1],[0,2],[2,2],[4,2],[0,3],[3,3],[4,3],[1,4],[2,4]])//@
        //Buchstaben
        pos.push([[1,0],[2,0],[0,1],[3,1],[0,2],[1,2],[2,2],[3,2],[0,3],[3,3],[0,4],[3,4]])//A
        pos.push([[0,0],[1,0],[2,0],[0,1],[3,1],[0,2],[1,2],[2,2],[0,3],[3,3],[0,4],[1,4],[2,4]])//B
        pos.push([[1,0],[2,0],[3,0],[0,1],[0,2],[0,3],[1,4],[2,4],[3,4]])//C
        pos.push([[0,0],[1,0],[2,0],[0,1],[3,1],[0,2],[3,2],[0,3],[3,3],[0,4],[1,4],[2,4]])//D
        pos.push([[0,0],[1,0],[2,0],[3,0],[0,1],[0,2],[1,2],[2,2],[0,3],[0,4],[1,4],[2,4],[3,4]])//E
        pos.push([[0,0],[1,0],[2,0],[3,0],[0,1],[0,2],[1,2],[2,2],[0,3],[0,4]])//F
        pos.push([[1,0],[2,0],[3,0],[0,1],[0,2],[3,2],[4,2],[0,3],[4,3],[1,4],[2,4],[3,4]])//G
        pos.push([[0,0],[3,0],[0,1],[3,1],[0,2],[1,2],[2,2],[3,2],[0,3],[3,3],[0,4],[3,4]])//H
        pos.push([[0,0],[1,0],[2,0],[1,1],[1,2],[1,3],[0,4],[1,4],[2,4]])//I
        pos.push([[0,0],[1,0],[2,0],[3,0],[4,0],[3,1],[3,2],[0,3],[3,3],[1,4],[2,4]])//J
        pos.push([[0,0],[3,0],[0,1],[2,1],[0,2],[1,2],[0,3],[2,3],[0,4],[3,4]])//K
        pos.push([[0,0],[0,1],[0,2],[0,3],[0,4],[1,4],[2,4],[3,4]])//L
        pos.push([[0,0],[4,0],[0,1],[1,1],[3,1],[4,1],[0,2],[2,2],[4,2],[0,3],[4,3],[0,4],[4,4]])//M
        pos.push([[0,0],[4,0],[0,1],[1,1],[4,1],[0,2],[2,2],[4,2],[0,3],[3,3],[4,3],[0,4],[4,4]])//N
        pos.push([[1,0],[2,0],[0,1],[3,1],[0,2],[3,2],[0,3],[3,3],[1,4],[2,4]])//O
        pos.push([[0,0],[1,0],[2,0],[0,1],[3,1],[0,2],[1,2],[2,2],[0,3],[0,4]])//P
        pos.push([[1,0],[2,0],[0,1],[3,1],[0,2],[3,2],[1,3],[2,3],[2,4],[3,4]])//Q
        pos.push([[0,0],[1,0],[2,0],[0,1],[3,1],[0,2],[1,2],[2,2],[0,3],[3,3],[0,4],[4,4]])//R
        pos.push([[1,0],[2,0],[3,0],[0,1],[1,2],[2,2],[3,3],[0,4],[1,4],[2,4]])//S
        pos.push([[0,0],[1,0],[2,0],[3,0],[4,0],[2,1],[2,2],[2,3],[2,4]])//T
        pos.push([[0,0],[3,0],[0,1],[3,1],[0,2],[3,2],[0,3],[3,3],[1,4],[2,4]])//U   
        pos.push([[0,0],[4,0],[0,1],[4,1],[0,2],[4,2],[1,3],[3,3],[2,4]])//V
        pos.push([[0,0],[4,0],[0,1],[4,1],[0,2],[2,2],[4,2],[0,3],[1,3],[3,3],[4,3],[0,4],[4,4]])//W
        pos.push([[0,0],[3,0],[0,1],[3,1],[1,2],[2,2],[0,3],[3,3],[0,4],[3,4]])//X
        pos.push([[0,0],[4,0],[1,1],[3,1],[2,2],[2,3],[2,4]])//Y
        pos.push([[0,0],[1,0],[2,0],[3,0],[2,1],[1,2],[0,3],[0,4],[1,4],[2,4],[3,4]])//Z
        let t: string[] = []
        let ar: string[] = [];
        let objects: number[][]=[];let round:number=0;
        t=text.split("");
        for(let u of t){
            basic.clearScreen()
            let p=e.indexOf(u)
            if(pos[p]!==undefined){
            for(let q of pos[p]){
                objects.push(q);
                objects[objects.length - 1][0]=parseInt(objects[objects.length - 1][0].toString())+round*6+5;
            }
            round++;
            }
        }

        let y:number [][]=[];
        for(let z of objects){
        y.push([z[0]/*+(5*round)*/,z[1]])

        }
        if(text.length()==1){
            basic.clearScreen()
            for(let z of y){
                led.plot(z[0]-5, z[1])
            }
            basic.pause(interval)
            return;
        }
        let sround:number=0;
        while(sround<y.length()){
            basic.clearScreen()
            for(let z of y){
            //basic.showString(z[0]+","+z[1]);
            if(z[0]-sround>=0 && z[0]-sround<5)led.plot(z[0]-sround, z[1])

            }
            sround++;
            basic.pause(interval)
        }

    }

    export function init(): number[][][] {
        let result:number[][][]=[];

        return result;
    }
}
